{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","utils/fetchClient.ts","components/PostDetails.tsx","services/getCommentsByPostId.ts","components/UserSelector.tsx","App.tsx","services/users.ts","services/getPostsByUserIS.ts","index.tsx"],"names":["PostsList","selectPost","posts","onSelectedPost","openedSidebar","setOpenedSidebar","setOpenedCommentForm","handleSidebar","post","id","handleOpenSideBar","className","map","title","type","onClick","Loader","NewCommentForm","onAddComment","name","email","body","setName","setEmail","setBody","postId","useState","errorName","setErrorName","errorEmail","setErrorEmail","errorBody","setErrorBody","loading","setLoading","onSubmit","e","preventDefault","trim","finally","onReset","htmlFor","placeholder","value","onChange","target","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","JSON","stringify","headers","then","fetch","response","json","client","PostDetails","openedCommentForm","comments","setComments","errorMessage","setErrorMessage","loadingComments","setLoadingComments","naMe","setNaMe","emAil","setEmAil","bOdy","setBOdy","useEffect","cOmments","catch","removeComment","commentId","currentComments","filter","comm","listPostServices","error","length","comment","href","newComment","UserSelector","users","onSelectUser","selectUser","focus","setFocus","dropdown","useRef","closeDropdown","current","contains","document","addEventListener","removeEventListener","ref","role","user","handleChooseUser","App","setUsers","setSelectUser","errorLoadUsers","setErrorLoadingUsers","loadingPosts","setLoadingPosts","messageHasNotPosts","setMessageHasNotPosts","setPosts","setSelecedPost","openedSideBar","userId","pOsts","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.7c7a6f84.chunk.js","sourcesContent":["import { Post } from '../types/Post';\n\ntype Props = {\n  selectPost: Post | null,\n  posts: Post[],\n  onSelectedPost: (post: Post | null) => void,\n  openedSidebar: boolean,\n  setOpenedSidebar: (open: boolean) => void,\n  setOpenedCommentForm: (op: boolean) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  selectPost,\n  posts,\n  onSelectedPost = () => {},\n  openedSidebar,\n  setOpenedSidebar = () => {},\n  setOpenedCommentForm = () => {},\n}) => {\n  const handleOpenSideBar = (post: Post) => {\n    setOpenedSidebar(true);\n    onSelectedPost(post);\n    setOpenedCommentForm(false);\n  };\n\n  const handleCloseSideBar = () => {\n    setOpenedSidebar(false);\n    onSelectedPost(null);\n  };\n\n  const handleSidebar = (post: Post) => {\n    if (openedSidebar && selectPost?.id === post.id) {\n      handleCloseSideBar();\n    } else {\n      handleOpenSideBar(post);\n    }\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {\n            posts.map((post) => (\n              <tr data-cy=\"Post\" key={post.id}>\n                <td data-cy=\"PostId\">{post.id}</td>\n\n                <td data-cy=\"PostTitle\">\n                  {post.title}\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className={(openedSidebar && selectPost?.id === post.id)\n                      ? 'button is-link'\n                      : 'button is-link is-light'}\n                    onClick={() => handleSidebar(post)}\n                  >\n                    {(openedSidebar && selectPost?.id === post.id)\n                      ? 'Close'\n                      : 'Open'}\n                  </button>\n                </td>\n              </tr>\n            ))\n          }\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState } from 'react';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  onAddComment: (comm: Comment) => Promise<void>,\n  name: string,\n  email: string,\n  body: string,\n  setName: (n: string) => void,\n  setEmail: (em: string) => void,\n  setBody: (b: string) => void,\n  postId: number | undefined,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  onAddComment,\n  name,\n  email,\n  body,\n  setName = () => {},\n  setEmail = () => {},\n  setBody = () => {},\n  postId,\n}) => {\n  const [errorName, setErrorName] = useState('');\n  const [errorEmail, setErrorEmail] = useState('');\n  const [errorBody, setErrorBody] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  const handleName = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setName(e.target.value);\n    setErrorName('');\n  };\n\n  const handleEmail = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setEmail(e.target.value);\n    setErrorEmail('');\n  };\n\n  const handleBody = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setBody(e.target.value);\n    setErrorBody('');\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!name.trim()) {\n      setErrorName('Name is required');\n    }\n\n    if (!email.trim()) {\n      setErrorEmail('Email is required');\n    }\n\n    if (!body.trim()) {\n      setErrorBody('Enter some text');\n    }\n\n    if (name.trim() && email.trim() && body.trim() && postId) {\n      setLoading(true);\n      onAddComment({\n        id: 0,\n        postId,\n        name: name.trim(),\n        email: email.trim(),\n        body: body.trim(),\n      })\n        .finally(() => setLoading(false));\n    }\n  };\n\n  const handleReset = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n      onReset={handleReset}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={errorName ? 'input is-danger' : 'input'}\n            value={name}\n            onChange={handleName}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {\n            errorName && (\n              <span\n                className=\"icon is-small is-right has-text-danger\"\n                data-cy=\"ErrorIcon\"\n              >\n                <i className=\"fas fa-exclamation-triangle\" />\n              </span>\n            )\n          }\n        </div>\n\n        {\n          errorName && (\n            <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n              {errorName}\n            </p>\n          )\n        }\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={errorEmail ? 'input is-danger' : 'input'}\n            value={email}\n            onChange={handleEmail}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {\n            errorEmail && (\n              <span\n                className=\"icon is-small is-right has-text-danger\"\n                data-cy=\"ErrorIcon\"\n              >\n                <i className=\"fas fa-exclamation-triangle\" />\n              </span>\n            )\n          }\n        </div>\n\n        {\n          errorEmail && (\n            <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n              {errorEmail}\n            </p>\n          )\n        }\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={errorBody ? 'textarea is-danger' : 'textarea'}\n            value={body}\n            onChange={handleBody}\n          />\n        </div>\n\n        {\n          errorBody && (\n            <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n              {errorBody}\n            </p>\n          )\n        }\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={loading\n              ? 'button is-link is-loading'\n              : 'button is-link'}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button type=\"reset\" className=\"button is-link is-light\">\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: <T>(url: string) => request<T>(url, 'DELETE'),\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport * as listPostServices from '../services/getCommentsByPostId';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  post: Post | null,\n  setOpenedCommentForm: (op: boolean) => void,\n  openedCommentForm: boolean,\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  post,\n  setOpenedCommentForm = () => {},\n  openedCommentForm,\n}) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [loadingComments, setLoadingComments] = useState(false);\n\n  const [naMe, setNaMe] = useState('');\n  const [emAil, setEmAil] = useState('');\n  const [bOdy, setBOdy] = useState('');\n\n  useEffect(() => {\n    if (post?.id) {\n      setErrorMessage('');\n\n      setLoadingComments(true);\n      listPostServices.getComments(post.id)\n        .then((cOmments: Comment[]) => {\n          setComments(cOmments);\n        })\n        .catch(() => setErrorMessage('Something went wrong'))\n        .finally(() => setLoadingComments(false));\n    }\n  }, [post?.id]);\n\n  const addComment = ({\n    postId,\n    name,\n    email,\n    body,\n  }: Comment) => {\n    setErrorMessage('');\n\n    return listPostServices.addNewComment({\n      postId,\n      name,\n      email,\n      body,\n    })\n      .then((newComment) => {\n        setComments(currentComments => {\n          return [...currentComments, newComment];\n        });\n        setBOdy('');\n      })\n      .catch(() => {\n        setErrorMessage('Something went wrong');\n      });\n  };\n\n  const removeComment = (commentId: number) => {\n    setComments(currentComments => currentComments.filter(\n      (comm) => comm.id !== commentId,\n    ));\n\n    return listPostServices.deleteComment(commentId)\n      .catch((error) => {\n        setComments(currentComments => currentComments.filter(\n          (comm) => comm.id !== commentId,\n        ));\n        throw error;\n      });\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${post?.id}: ${post?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {\n            loadingComments && (\n              <Loader />\n            )\n          }\n\n          {\n            errorMessage && (\n              <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n                {errorMessage}\n              </div>\n            )\n          }\n\n          {\n            !errorMessage\n            && !loadingComments\n            && (\n              <>\n                {\n                  !!comments.length && (\n                    <p className=\"title is-4\">Comments:</p>\n                  )\n                }\n                {\n                  comments.length > 0 ? (\n                    comments.map((comment) => (\n                      <article className=\"message is-small\" data-cy=\"Comment\">\n                        <div className=\"message-header\">\n                          <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                            {comment.name}\n                          </a>\n                          <button\n                            data-cy=\"CommentDelete\"\n                            type=\"button\"\n                            className=\"delete is-small\"\n                            aria-label=\"delete\"\n                            onClick={() => removeComment(comment.id)}\n                          >\n                            delete button\n                          </button>\n                        </div>\n                        <div className=\"message-body\" data-cy=\"CommentBody\">\n                          {comment.body}\n                        </div>\n                      </article>\n                    ))\n                  ) : (\n                    <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                      No comments yet\n                    </p>\n                  )\n                }\n\n                {\n                  !openedCommentForm && (\n                    <button\n                      data-cy=\"WriteCommentButton\"\n                      type=\"button\"\n                      className=\"button is-link\"\n                      onClick={() => setOpenedCommentForm(true)}\n                    >\n                      Write a comment\n                    </button>\n                  )\n                }\n              </>\n            )\n          }\n        </div>\n\n        {\n          openedCommentForm && !errorMessage && (\n            <NewCommentForm\n              onAddComment={addComment}\n              name={naMe}\n              email={emAil}\n              body={bOdy}\n              setName={setNaMe}\n              setEmail={setEmAil}\n              setBody={setBOdy}\n              postId={post?.id}\n            />\n          )\n        }\n      </div>\n    </div>\n  );\n};\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport function getComments(postId: number) {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n}\n\nexport const addNewComment = ({\n  postId,\n  name,\n  email,\n  body,\n}: Omit<Comment, 'id'>) => {\n  return client.post<Comment>('/comments', {\n    postId,\n    name,\n    email,\n    body,\n  });\n};\n\nexport function deleteComment(commentId: number) {\n  return client.delete<number>(`/comments/${commentId}`);\n}\n","import React, { useEffect, useRef, useState } from 'react';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[],\n  onSelectUser: (user: User | null) => void,\n  selectUser: User | null,\n  setOpenedSidebar: (open: boolean) => void,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  onSelectUser,\n  selectUser,\n  setOpenedSidebar = () => {},\n}) => {\n  const [focus, setFocus] = useState(false);\n  const dropdown = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const closeDropdown = (e: MouseEvent) => {\n      if (dropdown.current\n        && focus\n        && !dropdown.current.contains(e.target as Node)) {\n        setFocus(false);\n      }\n    };\n\n    document.addEventListener('click', closeDropdown);\n\n    return () => {\n      document.removeEventListener('click', closeDropdown);\n    };\n  }, [focus]);\n\n  const handleFocus = () => {\n    if (focus) {\n      setFocus(false);\n    } else {\n      setFocus(true);\n    }\n  };\n\n  const handleChooseUser = (user: User) => {\n    onSelectUser(user);\n    setFocus(false);\n    setOpenedSidebar(false);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={focus ? 'dropdown is-active' : 'dropdown'}\n    >\n      <div className=\"dropdown-trigger\" ref={dropdown}>\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={handleFocus}\n        >\n          <span>{selectUser ? (selectUser.name) : ('Choose a user')}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {\n            users.map((user) => (\n              <a\n                key={user.id}\n                href={`#user-${user.id}`}\n                className={selectUser?.id === user.id\n                  ? 'dropdown-item is-active'\n                  : 'dropdown-item'}\n                onClick={() => handleChooseUser(user)}\n              >\n                {user.name}\n              </a>\n            ))\n          }\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { getPosts } from './services/getPostsByUserIS';\nimport { Post } from './types/Post';\nimport { getUsers } from './services/users';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectUser, setSelectUser] = useState<User | null>(null);\n  const [errorLoadUsers, setErrorLoadingUsers] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const [loadingPosts, setLoadingPosts] = useState(false);\n  const [messageHasNotPosts, setMessageHasNotPosts] = useState('');\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [selectPost, setSelecedPost] = useState<Post | null>(null);\n  const [openedSideBar, setOpenedSidebar] = useState(false);\n  const [openedCommentForm, setOpenedCommentForm] = useState(false);\n\n  useEffect(() => {\n    getUsers()\n      .then(setUsers)\n      .catch(() => setErrorLoadingUsers('Unable to load users.'));\n  }, []);\n\n  useEffect(() => {\n    if (selectUser?.id) {\n      setErrorMessage('');\n      setMessageHasNotPosts('');\n\n      setLoadingPosts(true);\n      getPosts(selectUser.id)\n        .then((pOsts: Post[]) => {\n          if (!pOsts.length) {\n            setMessageHasNotPosts('No posts yet');\n          } else {\n            setPosts(pOsts);\n          }\n        })\n        .catch(() => setErrorMessage('Something went wrong!'))\n        .finally(() => setLoadingPosts(false));\n    }\n  }, [selectUser?.id]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  onSelectUser={setSelectUser}\n                  selectUser={selectUser}\n                  setOpenedSidebar={setOpenedSidebar}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {\n                  !selectUser && !errorLoadUsers && (\n                    <p data-cy=\"NoSelectedUser\">\n                      No user selected\n                    </p>\n                  )\n                }\n\n                {errorLoadUsers && (\n                  <div className=\"notification is-danger\">\n                    {errorLoadUsers}\n                  </div>\n                )}\n\n                {\n                  loadingPosts && (\n                    <Loader />\n                  )\n                }\n\n                {\n                  errorMessage && (\n                    <div\n                      className=\"notification is-danger\"\n                      data-cy=\"PostsLoadingError\"\n                    >\n                      {errorMessage}\n                    </div>\n                  )\n                }\n\n                {\n                  messageHasNotPosts && (\n                    <div\n                      className=\"notification is-warning\"\n                      data-cy=\"NoPostsYet\"\n                    >\n                      {messageHasNotPosts}\n                    </div>\n                  )\n                }\n\n                {\n                  (\n                    !errorMessage\n                    && !loadingPosts\n                    && !messageHasNotPosts\n                    && selectUser\n                  ) && (\n                    <PostsList\n                      selectPost={selectPost}\n                      posts={posts}\n                      onSelectedPost={setSelecedPost}\n                      openedSidebar={openedSideBar}\n                      setOpenedSidebar={setOpenedSidebar}\n                      setOpenedCommentForm={setOpenedCommentForm}\n                    />\n                  )\n                }\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={openedSideBar && selectPost\n              ? 'tile is-parent is-8-desktop Sidebar Sidebar--open'\n              : 'tile is-parent is-8-desktop Sidebar'}\n          >\n            <div className=\"tile is-child box is-success \">\n              {\n                openedSideBar && (\n                  <PostDetails\n                    post={selectPost}\n                    setOpenedCommentForm={setOpenedCommentForm}\n                    openedCommentForm={openedCommentForm}\n                  />\n                )\n              }\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport function getUsers() {\n  return client.get<User[]>('/users')\n    .then((users) => users);\n}\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport function getPosts(userId: number) {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n}\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}